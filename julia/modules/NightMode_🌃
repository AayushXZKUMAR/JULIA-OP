from telethon.tl.types import ChatBannedRights
from apscheduler.schedulers.asyncio import AsyncIOScheduler 
from julia.events import register
from julia import tbot
import os
from telethon import *
from pymongo import MongoClient
from julia import MONGO_DB_URI, CMD_HELP
import dateparser
import os, asyncio

client = MongoClient()
client = MongoClient(MONGO_DB_URI)
db = client["missjuliarobot"]
nightmod = db.nightmode
approved_users = db.approve

async def can_change_info(message):
    result = await tbot(
        functions.channels.GetParticipantRequest(
            channel=message.chat_id,
            user_id=message.sender_id,
        )
    )
    p = result.participant
    return isinstance(p, types.ChannelParticipantCreator) or (
        isinstance(p, types.ChannelParticipantAdmin) and p.admin_rights.change_info
    )

hehes = ChatBannedRights(
    until_date=None,
    send_messages=True,
    send_media=True,
    send_stickers=True,
    send_gifs=True,
    send_games=True,
    send_inline=True,
    send_polls=True,
    invite_users=True,
    pin_messages=True,
    change_info=True,
)

openhehe = ChatBannedRights(
    until_date=None,
    send_messages=False,
    send_media=False,
    send_stickers=False,
    send_gifs=False,
    send_games=False,
    send_inline=False,
    send_polls=False,
    invite_users=True,
    pin_messages=True,
    change_info=True,
)

@register(pattern="^/nightmode(?: |$)(.*)")
async def profanity(event):
    if event.fwd_from:
        return
    if event.is_private:
        return
    if MONGO_DB_URI is None:
        return
    if not await can_change_info(message=event):
        return
    input = event.pattern_match.group(1)
    chats = nightmod.find({})
    if not input:
        for c in chats:
            if event.chat_id == c["id"]:
                await event.reply(
                    "Please provide some input yes or no.\n\nCurrent setting is : **on**"
                )
                return
        await event.reply(
            "Please provide some input yes or no.\n\nCurrent setting is : **off**"
        )
        return
    if input == "on":
        if event.is_group:
            chats = nightmod.find({})
            for c in chats:
                if event.chat_id == c["id"]:
                    await event.reply(
                        "Nightmode is already activated for this chat."
                    )
                    return
            nightmod.insert_one({"id": event.chat_id, "valid": True, "zone": "America/New_York", "time": eval(dateparser.parse(f"7 AM", settings={"TIMEZONE": f"America/New_York", "DATE_ORDER": "DMY"})})
            await event.reply("Nightmode turned on for this chat.")
    if input == "off":
        if event.is_group:
            chats = nightmod.find({})
            for c in chats:
                if event.chat_id == c["id"]:
                    nightmod.delete_one({"id": event.chat_id})
                    await event.reply("Nightmode turned off for this chat.")
                    return
        await event.reply("Nightmode isn't turned on for this chat.")
    if not input == "on" and not input == "off":
        await event.reply("I only understand by on or off")
        return
